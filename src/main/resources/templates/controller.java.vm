package ${package.Controller};


import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import ${package.Service}.${table.serviceName}
import ${cfg.dto}.ResultBean;
import ${cfg.dto}.${entity}QueryBean;
import ${cfg.dto}.${entity}DTO;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(${table.controllerName}.class);

    @Autowired
    private ${table.serviceName} service;

    @RequestMapping(value = "/page", method = RequestMethod.POST)
    @ResponseBody
    public ResultBean pageQuery(@RequestBody ${entity}QueryBean queryBean) {
            if (queryBean.getPageSize() <= 0) {
                queryBean.setPageSize(20);
            }
            if (queryBean.getPageNo() < 0) {
                queryBean.setPageNo(0);
            }
            ResultBean resultBean = new ResultBean();
            try {
                resultBean = service.getListByPage(queryBean);
            } catch (Exception e) {
                log.error(e.getMessage());
                resultBean.setFailMsg(SystemStatus.SERVER_ERROR);
            }
            return resultBean ;
    }

    @RequestMapping(value = "", method = RequestMethod.POST)
    @ResponseBody
    public ResultBean add(@RequestBody ${entity}DTO dto) {
            ResultBean resultBean = new ResultBean();
//        if (StringUtils.isEmpty(usersDTO.getUsername())) {
//            resultBean.setFailMsg(200101,"用户名不能为空");
//            return resultBean;
//        }
//        if (StringUtils.isEmpty(usersDTO.getPassword())) {
//            resultBean.setFailMsg(200102,"密码不能为空");
//            return resultBean;
//        }
            try {
                resultBean = service.insert(dto) ;
            } catch (Exception e) {
                log.error(e.getMessage());
                resultBean.setFailMsg(SystemStatus.SERVER_ERROR);
                return resultBean ;
            }
            return resultBean ;
    }

    @RequestMapping(value = "", method = RequestMethod.PUT)
    @ResponseBody
    public ResultBean update(@RequestBody ${entity}DTO dto) {
            ResultBean resultBean = new ResultBean();
//        if (StringUtils.isEmpty(usersDTO.getId())) {
//            resultBean.setFailMsg(200104,"ID不能为空");
//            return resultBean;
//        }
            try {
                resultBean = service.update(dto) ;
            } catch (Exception e) {
                log.error(e.getMessage());
                resultBean.setFailMsg(SystemStatus.SERVER_ERROR);
                return resultBean ;
            }
            return resultBean ;
            }

    @RequestMapping(value = "", method = RequestMethod.DELETE)
    @ResponseBody
    public ResultBean delete(int id) {
            ResultBean resultBean = new ResultBean();
//        if (id == 0) {
//            resultBean.setFailMsg(200104,"ID不能为空");
//            return resultBean;
//        }
            try {
                resultBean = service.delete(id) ;
            } catch (Exception e) {
                log.error(e.getMessage());
                resultBean.setFailMsg(SystemStatus.SERVER_ERROR);
                return resultBean ;
            }
            return resultBean ;
     }

    @RequestMapping(value = "", method = RequestMethod.GET)
    @ResponseBody
    public ResultBean get(int id) {
            ResultBean resultBean = new ResultBean();
//        if (id == 0) {
//            resultBean.setFailMsg(200104,"ID不能为空");
//            return resultBean;
//        }
            try {
                resultBean = service.get(id) ;
            } catch (Exception e) {
                log.error(e.getMessage());
                resultBean.setFailMsg(SystemStatus.SERVER_ERROR);
                return resultBean ;
            }
            return resultBean ;
        }

}

#end